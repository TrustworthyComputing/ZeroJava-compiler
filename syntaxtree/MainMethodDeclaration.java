//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "void"
 * f1 -> "main"
 * f2 -> "("
 * f3 -> "void"
 * f4 -> ")"
 * f5 -> "{"
 * f6 -> ( VarDeclaration() )*
 * f7 -> ( Statement() )*
 * f8 -> "}"
 */
public class MainMethodDeclaration implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public NodeToken f2;
   public NodeToken f3;
   public NodeToken f4;
   public NodeToken f5;
   public NodeListOptional f6;
   public NodeListOptional f7;
   public NodeToken f8;

   public MainMethodDeclaration(NodeToken n0, NodeToken n1, NodeToken n2, NodeToken n3, NodeToken n4, NodeToken n5, NodeListOptional n6, NodeListOptional n7, NodeToken n8) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
   }

   public MainMethodDeclaration(NodeListOptional n0, NodeListOptional n1) {
      f0 = new NodeToken("void");
      f1 = new NodeToken("main");
      f2 = new NodeToken("(");
      f3 = new NodeToken("void");
      f4 = new NodeToken(")");
      f5 = new NodeToken("{");
      f6 = n0;
      f7 = n1;
      f8 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) throws Exception {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) throws Exception {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) throws Exception {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) throws Exception {
      v.visit(this,argu);
   }
}

