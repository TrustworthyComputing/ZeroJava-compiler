options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}

PARSER_BEGIN(ZilchParser)
  public class ZilchParser {}
PARSER_END(ZilchParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <ForMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < ASSIGN: "=" >
| < PLUSPLUS: "++" >
| < MINUSMINUS: "--" >
| < PLUSEQUAL: "+=" >
| < MINUSEQUAL: "-=" >
| < multEQUAL: "*=" >
| < DIVEQUAL: "/=" >
| < modEQUAL: "%=" >
| < LSHIFTEQUAL: "<<=" >
| < RSHIFTEQUAL: ">>=" >
| < ANDEQUAL: "&=" >
| < orEQUAL: "|=" >
| < XorEQUAL: "^=" >
| < LSHIFT: "<<" >
| < RSHIFT: ">>" >
| < GT: ">" >
| < GTE: ">=" >
| < LT: "<" >
| < LTE: "<=" >
| < EQ: "==" >
| < NEQ: "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < mult: "*" >
| < div: "/" >
| < mod: "%" >
| < and: "&" >
| < or: "|" >
| < xor: "^" >
| < LOGICAL_AND : "&&" >
| < LOGICAL_or : "||" >
| < not : "!" >
| < ELSE: "else" >
| < IF: "if" >
| < WHILE: "while" >
| < INTEGER: "int" >
| < SHORT: "short" >
| < UNSIGNED: "unsigned" >
| < MAIN: "main" >
| < NEW: "new" >
| < RETURN: "return" >
| < print: "Out.print" >
| < VOID: "void" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************
 * The Zilch Grammar Starts Here *
 ************************************/


void Goal() :
{}
{
    ( MethodDeclaration() )*
    MainMethodDeclaration()
    <EOF>
}

void VarDeclaration() :
{}
{
  Type() Identifier() <SEMICOLON>
}


void MainMethodDeclaration() :
{}
{
  <VOID> <MAIN> <LPAREN> <VOID> <RPAREN> <LBRACE>
    ( LOOKAHEAD(2) VarDeclaration() )*
    ( Statement() )*
  <RBRACE>
}

void MethodDeclaration() :
{}
{
  Type() Identifier()
  <LPAREN> ( FormalParameterList() )? <RPAREN>
  <LBRACE> ( LOOKAHEAD(2) VarDeclaration() )*
      ( Statement() )* <RETURN> Expression() <SEMICOLON> <RBRACE>
}

void FormalParameterList() :
{}
{
  FormalParameter() FormalParameterTail()
}

void FormalParameter() :
{}
{
  Type() Identifier()
}

void FormalParameterTail() :
{}
{
  ( FormalParameterTerm() )*
}

void FormalParameterTerm() :
{}
{
  "," FormalParameter()
}

void Type() :
{}
{
  LOOKAHEAD(3)
  ArrayType()
| IntegerType()
| ShortType()
| UShortType()
| Identifier()
}

void ArrayType() :
{}
{
  <INTEGER> <LSQPAREN> <RSQPAREN>
}

void IntegerType() :
{}
{
  <INTEGER>
}

void ShortType() :
{}
{
  <SHORT>
}

void UShortType() :
{}
{
  <UNSIGNED> <SHORT>
}

void Statement() :
{}
{
  Block()
| LOOKAHEAD(2)
  AssignmentStatement()
| LOOKAHEAD(3)
  OpAssignmentStatement()
| LOOKAHEAD(2)
  ArrayAssignmentStatement()
| LOOKAHEAD( Identifier() <PLUSPLUS> <SEMICOLON> )
  PlusPlusExpression()
| LOOKAHEAD( Identifier() <MINUSMINUS> <SEMICOLON> )
  MinusMinusExpression()
| LOOKAHEAD( <IF> <LPAREN> Expression() <RPAREN> Statement() <ELSE> Statement() )
  IfElseStatement()
| LOOKAHEAD( <IF> <LPAREN> Expression() <RPAREN> Statement())
  IfStatement()
| WhileStatement()
| PrintStatement()
| ReadPrimaryTape()
| ReadPrivateTape()
| SeekPrimaryTape()
| SeekPrivateTape()
| AnswerStatement()
}

void Block() :
{}
{
  <LBRACE> ( Statement() )* <RBRACE>
}

void AssignmentStatement() :
{}
{
  Identifier() <ASSIGN> Expression() <SEMICOLON>
}

void OpAssignmentStatement() :
{}
{
  Identifier() OpAssignmentOperator() Expression() <SEMICOLON>
}

void OpAssignmentOperator() :
{}
{ 
  <PLUSEQUAL>
| <MINUSEQUAL>
| <multEQUAL>
| <DIVEQUAL>
| <modEQUAL>
| <LSHIFTEQUAL>
| <RSHIFTEQUAL>
| <ANDEQUAL>
| <orEQUAL>
| <XorEQUAL>
}

void ArrayAssignmentStatement() :
{}
{
  Identifier() <LSQPAREN> Expression() <RSQPAREN> <ASSIGN> Expression() <SEMICOLON>
}

void IfElseStatement() :
{}
{
  <IF> <LPAREN> Expression() <RPAREN> Statement() <ELSE> Statement()
}

void IfStatement() :
{}
{
  <IF> <LPAREN> Expression() <RPAREN> Statement()
}

void TernaryExpression() :
{}
{
  <LPAREN> Expression() <RPAREN> "?" Expression() ":" Expression()
}

void WhileStatement() :
{}
{
  <WHILE> <LPAREN> Expression() <RPAREN> Statement()
}

void PrintStatement() :
{}
{
  "Out.print" <LPAREN> Expression() <RPAREN> <SEMICOLON>
}

void ReadPrimaryTape() :
{}
{
  "PrimaryTape.read" <LPAREN> Expression() <RPAREN> <SEMICOLON>
}

void ReadPrivateTape() :
{}
{
  "PrivateTape.read" <LPAREN> Expression() <RPAREN> <SEMICOLON>
}

void SeekPrimaryTape() :
{}
{
  "PrimaryTape.seek" <LPAREN> Expression() "," Expression() <RPAREN> <SEMICOLON>
}

void SeekPrivateTape() :
{}
{
  "PrivateTape.seek" <LPAREN> Expression() "," Expression() <RPAREN> <SEMICOLON>
}

void AnswerStatement() :
{}
{
  "Prover.answer" <LPAREN> Expression() <RPAREN> <SEMICOLON>
}


void Expression() :
{}
{
  LOOKAHEAD( PrimaryExpression() <LOGICAL_AND> )
  AndExpression()
| LOOKAHEAD( PrimaryExpression() <LOGICAL_or> )
  OrExpression()
| LOOKAHEAD( PrimaryExpression() <EQ> )
  EqExpression()
| LOOKAHEAD( PrimaryExpression() <NEQ> )
  NeqExpression()
| LOOKAHEAD( PrimaryExpression() <LT> )
  LessThanExpression()
| LOOKAHEAD( PrimaryExpression() <GT> )
  GreaterThanExpression()
| LOOKAHEAD( PrimaryExpression() <LTE> )
  LessEqualThanExpression()
| LOOKAHEAD( PrimaryExpression() <GTE> )
  GreaterEqualThanExpression()
| LOOKAHEAD( PrimaryExpression() BinaryOperator() )
  BinaryExpression()
| LOOKAHEAD( <not> PrimaryExpression() )
  NotExpression()
| LOOKAHEAD( PrimaryExpression() <LSQPAREN> )
  ArrayLookup()
| LOOKAHEAD( Identifier() <LPAREN> )
  MethodCall()
| LOOKAHEAD( <LPAREN> Expression() <RPAREN> "?" )
  TernaryExpression()
| PrimaryExpression()
}

void BinaryOperator() :
{}
{ 
  <PLUS>
| <MINUS>
| <mult>
| <div>
| <mod>
| <or>
| <and>
| <xor>
| <LSHIFT>
| <RSHIFT>
}

void AndExpression() :
{}
{
  PrimaryExpression() <LOGICAL_AND> PrimaryExpression()
}

void OrExpression() :
{}
{
  PrimaryExpression() <LOGICAL_or> PrimaryExpression()
}

void EqExpression() :
{}
{
  PrimaryExpression() <EQ> PrimaryExpression()
}

void NeqExpression() :
{}
{
  PrimaryExpression() <NEQ> PrimaryExpression()
}

void LessThanExpression() :
{}
{
  PrimaryExpression() <LT> PrimaryExpression()
}

void GreaterThanExpression() :
{}
{
  PrimaryExpression() <GT> PrimaryExpression()
}

void LessEqualThanExpression() :
{}
{
  PrimaryExpression() <LTE> PrimaryExpression()
}

void GreaterEqualThanExpression() :
{}
{
  PrimaryExpression() <GTE> PrimaryExpression()
}

void PlusPlusExpression() :
{}
{
  Identifier() <PLUSPLUS> <SEMICOLON>
}

void MinusMinusExpression() :
{}
{
  Identifier() <MINUSMINUS> <SEMICOLON>
}

void BinaryExpression() :
{}
{
  PrimaryExpression() BinaryOperator() PrimaryExpression()
}

void ArrayLookup() :
{}
{
  PrimaryExpression() <LSQPAREN> PrimaryExpression() <RSQPAREN>
}

void MethodCall() :
{}
{
  Identifier() <LPAREN> ( ExpressionList() )? <RPAREN>
}

void ExpressionList() :
{}
{
  Expression() ExpressionTail()
}

void ExpressionTail() :
{}
{
  ( ExpressionTerm() )*
}

void ExpressionTerm() :
{}
{
  "," Expression()
}

void PrimaryExpression() :
{}
{
  IntegerLiteral()
|
  Identifier()
|
  LOOKAHEAD(3)
  ArrayAllocationExpression()
|
  BracketExpression()
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}

void Identifier() :
{}
{
  <IDENTIFIER>
}

void ArrayAllocationExpression() :
{}
{
  <NEW> <INTEGER> <LSQPAREN> Expression() <RSQPAREN>
}

void NotExpression() :
{}
{
  <not> PrimaryExpression()
}

void BracketExpression() :
{}
{
  <LPAREN> Expression() <RPAREN>
}
