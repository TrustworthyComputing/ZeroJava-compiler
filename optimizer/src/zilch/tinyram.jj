options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}

PARSER_BEGIN(TinyRAMParser)
  public class TinyRAMParser {}
PARSER_END(TinyRAMParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
// Special Instructions
  < PRINT: "PRINT" >
| < ANSWER: "ANSWER" >
| < READ: "READ" >
| < SEEK: "SEEK" >
| < LOADW: "LOADW" >
| < STOREW: "STOREW" >
// Jump Instructions
| < JMP: "JMP" >
| < CJMP: "CJMP" >
| < CNJMP: "CNJMP" >
// Instructions that only use Dest and Arg2OrImmidiate
| < MOV : "MOV" >
| < NOT : "NOT" >
// Instructions that All three registers
| < AND : "AND" >
| < OR : "OR" >   
| < XOR : "XOR" >   
| < ADD: "ADD" >
| < SUB: "SUB" >
| < MULL: "MULL" >
| < SHL: "SHL" >
| < SHR: "SHR" >
// Comparisons
| < CMPE: "CMPE" >
| < CMPG: "CMPG" >
| < CMPGE: "CMPGE" >
// for registers
| < r: "r" >   
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* LITERALS */
{
  < REGISTER: ( "r" ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/***********************************
 * The TinyRAM Grammar Starts Here *
 ***********************************/

void Goal() :
{}
{
  TinyRAMProg() <EOF>
}

// ( ( Label() )* ( Stmt() )* )*
void TinyRAMProg() :
{}
{
  ( Stmt() )*
}

void Stmt() :
{}
{
  TwoRegInstr()
| ThreeRegInstr()
| CJumpStmt()
| JumpStmt()
| StoreWStmt()
| LoadWStmt()
| PrintStmt()
| AnswerStmt()
}

void CJumpStmt() :
{}
{	
  "CJMP" Register() Register() Label() 
}

void JumpStmt() :
{}
{
  "JMP" Register() Register() Label()
}

void StoreWStmt() :
{}
{
  "STOREW" Register() Register() SimpleExp()
}

void LoadWStmt() :
{}
{
  "LOADW" Register() Register() SimpleExp() 
}

void TwoRegInstr() :
{}
{
  TwoRegInstrOp() Register() Register() SimpleExp() 
}

void TwoRegInstrOp() :
{}
{ 
  "MOV"
| "NOT"
}

void ThreeRegInstr() :
{}
{
  ThreeRegInstrOp() Register() Register() SimpleExp() 
}

void ThreeRegInstrOp() :
{}
{ 
  "ADD"
| "SUB"
| "MULL" 
}


void PrintStmt() :
{}
{
  "PRINT" Register() Register() Register() 
}

void AnswerStmt() :
{}
{
  "ANSWER" Register() Register() Register() 
}

void SimpleExp() :
{}
{
  Register()
| IntegerLiteral()
| Label()
}

void Register() :
{}
{
   <REGISTER>
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}

void Label() :
{}
{
  <IDENTIFIER>
}
