//
// Generated by JTB 1.3.2 DIT@UoA patched
//

options {
   JAVA_UNICODE_ESCAPE = true;
   STATIC = false;
}

PARSER_BEGIN(TinyJavaParser)
import syntaxtree.*;
import java.util.Vector;


public class TinyJavaParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(TinyJavaParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <SEMICOLON: ";">
   | <DOT: ".">
   | <ASSIGN: "=">
   | <GT: ">">
   | <LT: "<">
   | <PLUS: "+">
   | <MINUS: "-">
   | <AND: "&&">
   | <OR: "||">
   | <NOT: "!">
   | <BOOLEAN: "boolean">
   | <CLASS: "class">
   | <INTERFACE: "interface">
   | <ELSE: "else">
   | <EXTENDS: "extends">
   | <FALSE: "false">
   | <IF: "if">
   | <WHILE: "while">
   | <INTEGER: "int">
   | <MAIN: "main">
   | <NEW: "new">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <STATIC: "static">
   | <STRING: "String">
   | <TRUE: "true">
   | <PRINT: "System.out.println">
   | <VOID: "void">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   MainMethodDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   MethodDeclaration n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=MainMethodDeclaration()
   (
      n2=MethodDeclaration()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   n4=<EOF> { 
      n4.beginColumn++; n4.endColumn++;
      n3 = JTBToolkit.makeNodeToken(n4);
   }
   
   { return new Goal(n0,n1,n3); }
}

VarDeclaration VarDeclaration() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=Type()
   n1=Identifier()
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new VarDeclaration(n0,n1,n2); }
}

MainMethodDeclaration MainMethodDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   VarDeclaration n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;
   NodeToken n16;
   Token n17;

   
}
{
   n1="void" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="main" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="void" { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11="{" { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      LOOKAHEAD(2)
      n13=VarDeclaration()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   (
      n15=Statement()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17="}" { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new MainMethodDeclaration(n0,n2,n4,n6,n8,n10,n12,n14,n16); }
}

MethodDeclaration MethodDeclaration() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   FormalParameterList n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   VarDeclaration n11;
   NodeListOptional n12 = new NodeListOptional();
   Statement n13;
   NodeToken n14;
   Token n15;
   Expression n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;

   
}
{
   n0=Type()
   n1=Identifier()
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=FormalParameterList()
      { n4.addNode(n5); }
   )?
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   n9="{" { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      LOOKAHEAD(2)
      n11=VarDeclaration()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   (
      n13=Statement()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   n15="return" { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Expression()
   n18=";" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20="}" { n19 = JTBToolkit.makeNodeToken(n20); }
   
   { return new MethodDeclaration(n0,n1,n2,n4,n6,n8,n10,n12,n14,n16,n17,n19); }
}

FormalParameterList FormalParameterList() :
{
   FormalParameter n0;
   FormalParameterTail n1;

   
}
{
   n0=FormalParameter()
   n1=FormalParameterTail()
   
   { return new FormalParameterList(n0,n1); }
}

FormalParameter FormalParameter() :
{
   Type n0;
   Identifier n1;

   
}
{
   n0=Type()
   n1=Identifier()
   
   { return new FormalParameter(n0,n1); }
}

FormalParameterTail FormalParameterTail() :
{
   NodeListOptional n0 = new NodeListOptional();
   FormalParameterTerm n1;

   
}
{
   (
      n1=FormalParameterTerm()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new FormalParameterTail(n0); }
}

FormalParameterTerm FormalParameterTerm() :
{
   NodeToken n0;
   Token n1;
   FormalParameter n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FormalParameter()
   
   { return new FormalParameterTerm(n0,n2); }
}

Type Type() :
{
   NodeChoice n0;
   ArrayType n1;
   BooleanType n2;
   IntegerType n3;
   Identifier n4;

   
}
{
   (
      LOOKAHEAD(3)
      n1=ArrayType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=BooleanType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=IntegerType()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Identifier()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new Type(n0); }
}

ArrayType ArrayType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArrayType(n0,n2,n4); }
}

BooleanType BooleanType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="boolean" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanType(n0); }
}

IntegerType IntegerType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerType(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   Block n1;
   AssignmentStatement n2;
   ArrayAssignmentStatement n3;
   IfStatement n4;
   WhileStatement n5;
   PrintStatement n6;
   ReadPrimaryTape n7;
   ReadPrivateTape n8;
   AnswerStatement n9;

   
}
{
   (
      n1=Block()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=AssignmentStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=ArrayAssignmentStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=IfStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=WhileStatement()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=PrintStatement()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=ReadPrimaryTape()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=ReadPrivateTape()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=AnswerStatement()
      { n0 = new NodeChoice(n9, 8); }
   )
   
   { return new Statement(n0); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Statement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Block(n0,n2,n4); }
}

AssignmentStatement AssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Identifier()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new AssignmentStatement(n0,n1,n3,n4); }
}

ArrayAssignmentStatement ArrayAssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=Identifier()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="=" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=";" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ArrayAssignmentStatement(n0,n1,n3,n4,n6,n8,n9); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeToken n8;
   Token n9;
   Statement n10;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   n9="else" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Statement()
   
   { return new IfStatement(n0,n2,n4,n5,n7,n8,n10); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

PrintStatement PrintStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.out.println" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PrintStatement(n0,n2,n4,n5,n7); }
}

ReadPrimaryTape ReadPrimaryTape() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="PrimaryTape.read" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ReadPrimaryTape(n0,n2,n4,n5,n7); }
}

ReadPrivateTape ReadPrivateTape() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="PrivateTape.read" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ReadPrivateTape(n0,n2,n4,n5,n7); }
}

AnswerStatement AnswerStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="Prover.answer" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new AnswerStatement(n0,n2,n4,n5,n7); }
}

Expression Expression() :
{
   NodeChoice n0;
   AndExpression n1;
   OrExpression n2;
   EqExpression n3;
   LessThanExpression n4;
   GreaterThanExpression n5;
   LessEqualThanExpression n6;
   GreaterEqualThanExpression n7;
   PlusExpression n8;
   MinusExpression n9;
   TimesExpression n10;
   ArrayLookup n11;
   MessageSend n12;
   MethodCall n13;
   Clause n14;

   
}
{
   (
      LOOKAHEAD(Clause() "&&")
      n1=AndExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(Clause() "||")
      n2=OrExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(PrimaryExpression() "==")
      n3=EqExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(PrimaryExpression() "<")
      n4=LessThanExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(PrimaryExpression() ">")
      n5=GreaterThanExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(PrimaryExpression() "<=")
      n6=LessEqualThanExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(PrimaryExpression() ">=")
      n7=GreaterEqualThanExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(PrimaryExpression() "+")
      n8=PlusExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(PrimaryExpression() "-")
      n9=MinusExpression()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(PrimaryExpression() "*")
      n10=TimesExpression()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(PrimaryExpression() "[")
      n11=ArrayLookup()
      { n0 = new NodeChoice(n11, 10); }
   |
      LOOKAHEAD(PrimaryExpression() "." Identifier() "(")
      n12=MessageSend()
      { n0 = new NodeChoice(n12, 11); }
   |
      LOOKAHEAD(Identifier() "(")
      n13=MethodCall()
      { n0 = new NodeChoice(n13, 12); }
   |
      n14=Clause()
      { n0 = new NodeChoice(n14, 13); }
   )
   
   { return new Expression(n0); }
}

AndExpression AndExpression() :
{
   Clause n0;
   NodeToken n1;
   Token n2;
   Clause n3;

   
}
{
   n0=Clause()
   n2="&&" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Clause()
   
   { return new AndExpression(n0,n1,n3); }
}

OrExpression OrExpression() :
{
   Clause n0;
   NodeToken n1;
   Token n2;
   Clause n3;

   
}
{
   n0=Clause()
   n2="||" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Clause()
   
   { return new OrExpression(n0,n1,n3); }
}

EqExpression EqExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="==" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new EqExpression(n0,n1,n3); }
}

LessThanExpression LessThanExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="<" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new LessThanExpression(n0,n1,n3); }
}

GreaterThanExpression GreaterThanExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=">" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new GreaterThanExpression(n0,n1,n3); }
}

LessEqualThanExpression LessEqualThanExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="<=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new LessEqualThanExpression(n0,n1,n3); }
}

GreaterEqualThanExpression GreaterEqualThanExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=">=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new GreaterEqualThanExpression(n0,n1,n3); }
}

PlusExpression PlusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new PlusExpression(n0,n1,n3); }
}

MinusExpression MinusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="-" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new MinusExpression(n0,n1,n3); }
}

TimesExpression TimesExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new TimesExpression(n0,n1,n3); }
}

ArrayLookup ArrayLookup() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=PrimaryExpression()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArrayLookup(n0,n1,n3,n4); }
}

MessageSend MessageSend() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   ExpressionList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=PrimaryExpression()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=ExpressionList()
      { n6.addNode(n7); }
   )?
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new MessageSend(n0,n1,n3,n4,n6,n8); }
}

MethodCall MethodCall() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   ExpressionList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=Identifier()
   n2="(" { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=ExpressionList()
      { n3.addNode(n4); }
   )?
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new MethodCall(n0,n1,n3,n5); }
}

ExpressionList ExpressionList() :
{
   Expression n0;
   ExpressionTail n1;

   
}
{
   n0=Expression()
   n1=ExpressionTail()
   
   { return new ExpressionList(n0,n1); }
}

ExpressionTail ExpressionTail() :
{
   NodeListOptional n0 = new NodeListOptional();
   ExpressionTerm n1;

   
}
{
   (
      n1=ExpressionTerm()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new ExpressionTail(n0); }
}

ExpressionTerm ExpressionTerm() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new ExpressionTerm(n0,n2); }
}

Clause Clause() :
{
   NodeChoice n0;
   NotExpression n1;
   PrimaryExpression n2;

   
}
{
   (
      n1=NotExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PrimaryExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Clause(n0); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   IntegerLiteral n1;
   TrueLiteral n2;
   FalseLiteral n3;
   Identifier n4;
   ArrayAllocationExpression n5;
   AllocationExpression n6;
   BracketExpression n7;

   
}
{
   (
      n1=IntegerLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=TrueLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=FalseLiteral()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Identifier()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(3)
      n5=ArrayAllocationExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=AllocationExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=BracketExpression()
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new PrimaryExpression(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

TrueLiteral TrueLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="true" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TrueLiteral(n0); }
}

FalseLiteral FalseLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="false" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FalseLiteral(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

ArrayAllocationExpression ArrayAllocationExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="int" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="[" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ArrayAllocationExpression(n0,n2,n4,n6,n7); }
}

AllocationExpression AllocationExpression() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new AllocationExpression(n0,n2,n3,n5); }
}

NotExpression NotExpression() :
{
   NodeToken n0;
   Token n1;
   Clause n2;

   
}
{
   n1="!" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Clause()
   
   { return new NotExpression(n0,n2); }
}

BracketExpression BracketExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new BracketExpression(n0,n2,n3); }
}
