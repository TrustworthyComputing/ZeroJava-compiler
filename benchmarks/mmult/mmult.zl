void main(void) {
	int i;
	int j;
	int k;
	int x;
	int y;
	int z;
	int rows_1;
	int cols_1_rows_2;
	int cols_2;
	int[] a;
	int[] b;
	int[] res;
	PrimaryTape.read(rows_1);
	PrimaryTape.read(cols_1_rows_2);
	PrimaryTape.read(cols_2);
	a = new int[rows_1 * cols_1_rows_2];
	b = new int[cols_1_rows_2 * cols_2];
	res = new int[rows_1 * cols_2];
	
	i = 0;
	while (i < (rows_1 * cols_1_rows_2)) {
		PrivateTape.read(x);
		a[i] = x;
		// printf("%d, ", a[i]);
		i++;
	}
	// printf("\n");
	i = 0;
	while (i < (cols_1_rows_2 * cols_2)) {
		PrivateTape.read(x);
		b[i] = x;
		// printf("%d, ", b[i]);
		i++;
	}
	// printf("\n");
	i = 0;
	while (i < (rows_1 * cols_2)) {
		res[i] = 0;
		i++;
	}
	
	i = 0;
	while (i < rows_1) {
		j = 0;
		while (j < cols_2) {
			k = 0;
			while (k < cols_1_rows_2) {
				x = res[((i*cols_2) + j)];
				y = a[((i * cols_1_rows_2) + k)];
				y = b[((k * cols_2) + j)];
				res[((i*cols_2) + j)] = (x + y) + z;
				k++;
			}
			j++;
		}
		i++;
	}
	
	// i = 0;
	// while (i < rows_1 * cols_2) {
	// 	printf("%d, ", res[i]);
	// 	i++;
	// }
	// printf("\n");
	
	Prover.answer(res[0]);
}


