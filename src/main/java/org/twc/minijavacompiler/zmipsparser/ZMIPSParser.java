/* Generated By:JavaCC: Do not edit this line. ZMIPSParser.java */
package org.twc.minijavacompiler.zmipsparser;

import org.twc.minijavacompiler.zmipssyntaxtree.*;
import java.util.Vector;


public class ZMIPSParser implements ZMIPSParserConstants {

  final public Goal Goal() throws ParseException {
   ZMIPSProg n0;
   NodeToken n1;
   Token n2;
    n0 = ZMIPSProg();
    n2 = jj_consume_token(0);
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new Goal(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ZMIPSProg ZMIPSProg() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   Stmt n1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case print:
      case answer:
      case pubread:
      case secread:
      case lw:
      case sw:
      case j:
      case cjmp:
      case cnjmp:
      case move:
      case not:
      case and:
      case or:
      case xor:
      case add:
      case sub:
      case mult:
      case sll:
      case srl:
      case cmpe:
      case cmpg:
      case cmpge:
      case IDENTIFIER:
      case 45:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n1 = Stmt();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new ZMIPSProg(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Stmt Stmt() throws ParseException {
   NodeChoice n0;
   Label n1;
   TwoRegInstr n2;
   ThreeRegInstr n3;
   JmpStmts n4;
   ComparisonStmts n5;
   LwStmt n6;
   SwStmt n7;
   PrintStmt n8;
   AnswerStmt n9;
   PubReadStmt n10;
   SecReadStmt n11;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = Label();
        n0 = new NodeChoice(n1, 0);
      break;
    case move:
    case not:
    case 45:
      n2 = TwoRegInstr();
        n0 = new NodeChoice(n2, 1);
      break;
    case and:
    case or:
    case xor:
    case add:
    case sub:
    case mult:
    case sll:
    case srl:
      n3 = ThreeRegInstr();
        n0 = new NodeChoice(n3, 2);
      break;
    case j:
    case cjmp:
    case cnjmp:
      n4 = JmpStmts();
        n0 = new NodeChoice(n4, 3);
      break;
    case cmpe:
    case cmpg:
    case cmpge:
      n5 = ComparisonStmts();
        n0 = new NodeChoice(n5, 4);
      break;
    case lw:
      n6 = LwStmt();
        n0 = new NodeChoice(n6, 5);
      break;
    case sw:
      n7 = SwStmt();
        n0 = new NodeChoice(n7, 6);
      break;
    case print:
      n8 = PrintStmt();
        n0 = new NodeChoice(n8, 7);
      break;
    case answer:
      n9 = AnswerStmt();
        n0 = new NodeChoice(n9, 8);
      break;
    case pubread:
      n10 = PubReadStmt();
        n0 = new NodeChoice(n10, 9);
      break;
    case secread:
      n11 = SecReadStmt();
        n0 = new NodeChoice(n11, 10);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Stmt(n0);}
    throw new Error("Missing return statement in function");
  }

  final public JmpStmts JmpStmts() throws ParseException {
   JmpOps n0;
   Label n1;
    n0 = JmpOps();
    n1 = Label();
     {if (true) return new JmpStmts(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public JmpOps JmpOps() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case j:
      n2 = jj_consume_token(j);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case cjmp:
      n4 = jj_consume_token(cjmp);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case cnjmp:
      n6 = jj_consume_token(cnjmp);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new JmpOps(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ComparisonStmts ComparisonStmts() throws ParseException {
   ComparisonOps n0;
   Register n1;
   NodeToken n2;
   Token n3;
   SimpleExp n4;
    n0 = ComparisonOps();
    n1 = Register();
    n3 = jj_consume_token(42);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SimpleExp();
     {if (true) return new ComparisonStmts(n0,n1,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ComparisonOps ComparisonOps() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cmpe:
      n2 = jj_consume_token(cmpe);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case cmpg:
      n4 = jj_consume_token(cmpg);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case cmpge:
      n6 = jj_consume_token(cmpge);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ComparisonOps(n0);}
    throw new Error("Missing return statement in function");
  }

  final public LwStmt LwStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SimpleExp n4;
   NodeToken n5;
   Token n6;
   SimpleExp n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(lw);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(42);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SimpleExp();
    n6 = jj_consume_token(43);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SimpleExp();
    n9 = jj_consume_token(44);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new LwStmt(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public SwStmt SwStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SimpleExp n4;
   NodeToken n5;
   Token n6;
   SimpleExp n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(sw);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(42);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SimpleExp();
    n6 = jj_consume_token(43);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SimpleExp();
    n9 = jj_consume_token(44);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new SwStmt(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public TwoRegInstr TwoRegInstr() throws ParseException {
   TwoRegInstrOp n0;
   Register n1;
   NodeToken n2;
   Token n3;
   SimpleExp n4;
    n0 = TwoRegInstrOp();
    n1 = Register();
    n3 = jj_consume_token(42);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SimpleExp();
     {if (true) return new TwoRegInstr(n0,n1,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public TwoRegInstrOp TwoRegInstrOp() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case move:
      n2 = jj_consume_token(move);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case 45:
      n4 = jj_consume_token(45);
                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case not:
      n6 = jj_consume_token(not);
                 n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TwoRegInstrOp(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ThreeRegInstr ThreeRegInstr() throws ParseException {
   ThreeRegInstrOp n0;
   Register n1;
   NodeToken n2;
   Token n3;
   Register n4;
   NodeToken n5;
   Token n6;
   SimpleExp n7;
    n0 = ThreeRegInstrOp();
    n1 = Register();
    n3 = jj_consume_token(42);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Register();
    n6 = jj_consume_token(42);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SimpleExp();
     {if (true) return new ThreeRegInstr(n0,n1,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public ThreeRegInstrOp ThreeRegInstrOp() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
      n2 = jj_consume_token(and);
                 n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case or:
      n4 = jj_consume_token(or);
                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case xor:
      n6 = jj_consume_token(xor);
                 n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case add:
      n8 = jj_consume_token(add);
                 n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case sub:
      n10 = jj_consume_token(sub);
                  n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case mult:
      n12 = jj_consume_token(mult);
                   n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case sll:
      n14 = jj_consume_token(sll);
                  n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case srl:
      n16 = jj_consume_token(srl);
                  n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ThreeRegInstrOp(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrintStmt PrintStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   SimpleExp n2;
    n1 = jj_consume_token(print);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SimpleExp();
     {if (true) return new PrintStmt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public AnswerStmt AnswerStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   SimpleExp n2;
    n1 = jj_consume_token(answer);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SimpleExp();
     {if (true) return new AnswerStmt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public PubReadStmt PubReadStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   Register n2;
    n1 = jj_consume_token(pubread);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Register();
     {if (true) return new PubReadStmt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public SecReadStmt SecReadStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   Register n2;
    n1 = jj_consume_token(secread);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Register();
     {if (true) return new SecReadStmt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public SimpleExp SimpleExp() throws ParseException {
   NodeChoice n0;
   Register n1;
   IntegerLiteral n2;
   Label n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      n1 = Register();
        n0 = new NodeChoice(n1, 0);
      break;
    case INTEGER_LITERAL:
      n2 = IntegerLiteral();
        n0 = new NodeChoice(n2, 1);
      break;
    case IDENTIFIER:
      n3 = Label();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SimpleExp(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Register Register() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(REGISTER);
                   n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Register(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Label Label() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Label(n0);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ZMIPSParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffe7800,0xfffe7800,0x380000,0x0,0xc00000,0xff000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x208d,0x208d,0x0,0xd,0x2000,0x0,0xe0,};
   }

  /** Constructor with InputStream. */
  public ZMIPSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ZMIPSParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ZMIPSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ZMIPSParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ZMIPSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ZMIPSParser(ZMIPSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ZMIPSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
