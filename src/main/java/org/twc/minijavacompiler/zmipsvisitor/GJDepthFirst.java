//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package org.twc.minijavacompiler.zmipsvisitor;
import org.twc.minijavacompiler.zmipssyntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) throws Exception {
      if (n.size() == 1)
         return n.elementAt(0).accept(this,argu);
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) throws Exception {
      if ( n.present() ) {
         if (n.size() == 1)
            return n.elementAt(0).accept(this,argu);
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) throws Exception {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) throws Exception {
      if (n.size() == 1)
         return n.elementAt(0).accept(this,argu);
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) throws Exception { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ZMIPSProg()
    * f1 -> <EOF>
    */
   public R visit(Goal n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( Stmt() )*
    */
   public R visit(ZMIPSProg n, A argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> Label()
    *       | TwoRegInstr()
    *       | ThreeRegInstr()
    *       | JmpStmts()
    *       | ComparisonStmts()
    *       | LwStmt()
    *       | SwStmt()
    *       | PrintStmt()
    *       | AnswerStmt()
    *       | PubReadStmt()
    *       | SecReadStmt()
    */
   public R visit(Stmt n, A argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> JmpOps()
    * f1 -> Label()
    */
   public R visit(JmpStmts n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "j"
    *       | "cjmp"
    *       | "cnjmp"
    */
   public R visit(JmpOps n, A argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> ComparisonOps()
    * f1 -> Register()
    * f2 -> ","
    * f3 -> SimpleExp()
    */
   public R visit(ComparisonStmts n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "cmpe"
    *       | "cmpg"
    *       | "cmpge"
    */
   public R visit(ComparisonOps n, A argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "lw"
    * f1 -> ","
    * f2 -> SimpleExp()
    * f3 -> "("
    * f4 -> SimpleExp()
    * f5 -> ")"
    */
   public R visit(LwStmt n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "sw"
    * f1 -> ","
    * f2 -> SimpleExp()
    * f3 -> "("
    * f4 -> SimpleExp()
    * f5 -> ")"
    */
   public R visit(SwStmt n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> TwoRegInstrOp()
    * f1 -> Register()
    * f2 -> ","
    * f3 -> SimpleExp()
    */
   public R visit(TwoRegInstr n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "move"
    *       | "la"
    *       | "not"
    */
   public R visit(TwoRegInstrOp n, A argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> ThreeRegInstrOp()
    * f1 -> Register()
    * f2 -> ","
    * f3 -> Register()
    * f4 -> ","
    * f5 -> SimpleExp()
    */
   public R visit(ThreeRegInstr n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "and"
    *       | "or"
    *       | "xor"
    *       | "add"
    *       | "sub"
    *       | "mult"
    *       | "sll"
    *       | "srl"
    */
   public R visit(ThreeRegInstrOp n, A argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "print"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "answer"
    * f1 -> SimpleExp()
    */
   public R visit(AnswerStmt n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "pubread"
    * f1 -> Register()
    */
   public R visit(PubReadStmt n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "secread"
    * f1 -> Register()
    */
   public R visit(SecReadStmt n, A argu) throws Exception {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Register()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> <REGISTER>
    */
   public R visit(Register n, A argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) throws Exception {
      return n.f0.accept(this, argu);
   }

}
