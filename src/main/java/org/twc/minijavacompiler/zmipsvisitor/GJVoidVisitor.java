//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package org.twc.minijavacompiler.zmipsvisitor;
import org.twc.minijavacompiler.zmipssyntaxtree.*;
import java.util.*;

/**
 * All GJ void visitors must implement this interface.
 */

public interface GJVoidVisitor<A> {

   //
   // GJ void Auto class visitors
   //

   public void visit(NodeList n, A argu) throws Exception;
   public void visit(NodeListOptional n, A argu) throws Exception;
   public void visit(NodeOptional n, A argu) throws Exception;
   public void visit(NodeSequence n, A argu) throws Exception;
   public void visit(NodeToken n, A argu) throws Exception;

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ZMIPSProg()
    * f1 -> <EOF>
    */
   public void visit(Goal n, A argu) throws Exception;

   /**
    * f0 -> ( Stmt() )*
    */
   public void visit(ZMIPSProg n, A argu) throws Exception;

   /**
    * f0 -> Label()
    *       | TwoRegInstr()
    *       | ThreeRegInstr()
    *       | JmpStmts()
    *       | ComparisonStmts()
    *       | LwStmt()
    *       | SwStmt()
    *       | PrintStmt()
    *       | AnswerStmt()
    *       | PubReadStmt()
    *       | SecReadStmt()
    */
   public void visit(Stmt n, A argu) throws Exception;

   /**
    * f0 -> JmpOps()
    * f1 -> Label()
    */
   public void visit(JmpStmts n, A argu) throws Exception;

   /**
    * f0 -> "j"
    *       | "cjmp"
    *       | "cnjmp"
    */
   public void visit(JmpOps n, A argu) throws Exception;

   /**
    * f0 -> ComparisonOps()
    * f1 -> Register()
    * f2 -> ","
    * f3 -> SimpleExp()
    */
   public void visit(ComparisonStmts n, A argu) throws Exception;

   /**
    * f0 -> "cmpe"
    *       | "cmpg"
    *       | "cmpge"
    */
   public void visit(ComparisonOps n, A argu) throws Exception;

   /**
    * f0 -> "lw"
    * f1 -> ","
    * f2 -> SimpleExp()
    * f3 -> "("
    * f4 -> SimpleExp()
    * f5 -> ")"
    */
   public void visit(LwStmt n, A argu) throws Exception;

   /**
    * f0 -> "sw"
    * f1 -> ","
    * f2 -> SimpleExp()
    * f3 -> "("
    * f4 -> SimpleExp()
    * f5 -> ")"
    */
   public void visit(SwStmt n, A argu) throws Exception;

   /**
    * f0 -> TwoRegInstrOp()
    * f1 -> Register()
    * f2 -> ","
    * f3 -> SimpleExp()
    */
   public void visit(TwoRegInstr n, A argu) throws Exception;

   /**
    * f0 -> "move"
    *       | "la"
    *       | "not"
    */
   public void visit(TwoRegInstrOp n, A argu) throws Exception;

   /**
    * f0 -> ThreeRegInstrOp()
    * f1 -> Register()
    * f2 -> ","
    * f3 -> Register()
    * f4 -> ","
    * f5 -> SimpleExp()
    */
   public void visit(ThreeRegInstr n, A argu) throws Exception;

   /**
    * f0 -> "and"
    *       | "or"
    *       | "xor"
    *       | "add"
    *       | "sub"
    *       | "mult"
    *       | "sll"
    *       | "srl"
    */
   public void visit(ThreeRegInstrOp n, A argu) throws Exception;

   /**
    * f0 -> "print"
    * f1 -> SimpleExp()
    */
   public void visit(PrintStmt n, A argu) throws Exception;

   /**
    * f0 -> "answer"
    * f1 -> SimpleExp()
    */
   public void visit(AnswerStmt n, A argu) throws Exception;

   /**
    * f0 -> "pubread"
    * f1 -> Register()
    */
   public void visit(PubReadStmt n, A argu) throws Exception;

   /**
    * f0 -> "secread"
    * f1 -> Register()
    */
   public void visit(SecReadStmt n, A argu) throws Exception;

   /**
    * f0 -> Register()
    *       | IntegerLiteral()
    *       | Label()
    */
   public void visit(SimpleExp n, A argu) throws Exception;

   /**
    * f0 -> <REGISTER>
    */
   public void visit(Register n, A argu) throws Exception;

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n, A argu) throws Exception;

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Label n, A argu) throws Exception;

}

